extends layout

block content
  .view
    .block
      .img
      .text
        span This is the result of my first steps building "Isomorphic JavaScript" apps, that run both on the server and in the browser. In this article I try to focus on the concepts and the problems that need to be solved, and towards the end I briefly cover an example implementation using Yahoo's Fluxible libraries and React Router.
          Isomorphic JavaScript applications (you'll also hear the terms "Server-Side Rendering" or "Progressive JavaScript") is something we hear and read quite a bit about lately. Node.js made it possible, Airbnb blogged about it in 2013, React renders HTML on the server, Ember.js is working on "FastBoot", Andres Suarez from SoundCloud and Michael Ridgway from Yahoo did talks on the subject, etc. I decided to dig in and see what it was all about, what kind of problems you encountered, and possible ways to solve them.
          I found that it is still a young idea, and I expect the patterns and available libraries (ex: Fluxible, React Router, Nexus React, Taunus, etc.) to evolve quite a bit in the future. This is one reason why, for a good part of this post, I'll try to stay away from any specific implementation or framework, and focus more on the general concepts and problems to be solved (although of course, you might recognize the influence of certain libraries if you've used them). At the end, I will look at how these ideas translate in a more practical implementation, using Yahoo's Fluxible and React Router.
